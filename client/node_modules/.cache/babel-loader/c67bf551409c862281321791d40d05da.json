{"ast":null,"code":"import * as types from \"../constants/user.constants\";\nimport api from \"../api\";\n\nconst register = (email, password) => async dispatch => {\n  console.log({\n    email,\n    password\n  });\n\n  try {\n    dispatch({\n      type: types.REGISTER_REQUEST\n    });\n    const {\n      data\n    } = await api.post(\"/users\", {\n      email,\n      password\n    });\n    dispatch({\n      type: types.REGISTER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.REGISTER_FAILURE\n    });\n    console.log({\n      error\n    });\n  }\n};\n\nconst authActions = {\n  register\n};\nexport { authActions };","map":{"version":3,"sources":["/Users/nguyenanhkhoi/Desktop/coderschool/9thweek/9-4IMDB/ftw-IMDB/client/src/redux/actions/user.actions.js"],"names":["types","api","register","email","password","dispatch","console","log","type","REGISTER_REQUEST","data","post","REGISTER_SUCCESS","payload","error","REGISTER_FAILURE","authActions"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,6BAAvB;AAEA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AACxDC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACJ,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAZ;;AACA,MAAI;AACFC,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAER,KAAK,CAACS;AAAd,KAAD,CAAR;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMT,GAAG,CAACU,IAAJ,CAAS,QAAT,EAAmB;AAAER,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAnB,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAER,KAAK,CAACY,gBAAd;AAAgCC,MAAAA,OAAO,EAAEH;AAAzC,KAAD,CAAR;AACD,GAJD,CAIE,OAAOI,KAAP,EAAc;AACdT,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAER,KAAK,CAACe;AAAd,KAAD,CAAR;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEO,MAAAA;AAAF,KAAZ;AACD;AACF,CAVD;;AAYA,MAAME,WAAW,GAAG;AAClBd,EAAAA;AADkB,CAApB;AAIA,SAASc,WAAT","sourcesContent":["import * as types from \"../constants/user.constants\";\n\nimport api from \"../api\";\n\nconst register = (email, password) => async (dispatch) => {\n  console.log({email, password})\n  try {\n    dispatch({ type: types.REGISTER_REQUEST });\n    const { data } = await api.post(\"/users\", { email, password });\n    dispatch({ type: types.REGISTER_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: types.REGISTER_FAILURE });\n    console.log({ error });\n  }\n};\n\nconst authActions = {\n  register,\n};\n\nexport { authActions };\n "]},"metadata":{},"sourceType":"module"}